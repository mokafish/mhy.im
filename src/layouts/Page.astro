---
import '../styles/global.css';
import 'mdui/mdui.css';
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
const {title, prose} = Astro.props
const className = Astro.props?.class;

let prose_cls = prose ? ' mdui-prose' : '';
prose_cls = prose ? 'article prose xl:text-xl' : '';
---

<html lang="zh-hans">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=4, shrink-to-fit=no"/>
    <meta name="renderer" content="webkit"/>

    <link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
    <title>{title}</title>
    <!--<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/mdui@2.1.3/mdui.min.css">-->
    <!--<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/mdui@2.1.3/mdui.global.min.js"></script>-->
    <style>
        .waitFOUC .hasFOUC {
            //visibility: hidden;
            opacity: 0;
            transform: translateY(100px);
        }

        .hasFOUC {
            transition: opacity 500ms ease-in,
            transform 1s ease-out; /* 过渡属性 */

            transform: translateY(0px);
            opacity: 1;
        }

        .waitFOUC .backFOUC {
            visibility: visible;
        }

        .backFOUC {
            //visibility: hidden;
            position: absolute;
            width: 100vw;
            height: 100vh;
            background: rgba(var(--mdui-color-secondary-container), 0.5);
        }

        .backFOUC > .app-bar {
            height: 112px;
            background-color: rgb(var(--mdui-color-primary-container));
        }

        .main-layout {
            background-color: rgb(var(--mdui-color-background));


        }

        body {
            overflow: hidden;
        }

        .main-layout{
            overflow: hidden;
        }
        #anchor-page-top{
            scroll-margin-top: 100px;
        }

    </style>

    <script type="text/javascript" is:inline>
        console.debug('document start load...');
        const dark_cls = "mdui-theme-dark";
        const light_cls = "mdui-theme-light";
        const root = document.getElementsByTagName('html')[0];
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            root.setAttribute('class', dark_cls);
            console.debug(`read saved theme "${savedTheme}"`);
        } else if (savedTheme === 'light') {
            root.setAttribute('class', light_cls);
            console.debug(`read saved theme "${savedTheme}"`);
        }

        function is_mobile() {
            const styles = getComputedStyle(document.body);
            const mobile_breakpoint = styles.getPropertyValue('--mdui-breakpoint-md').trim();
            return window.innerWidth < parseInt(mobile_breakpoint);
        }

        window.is_mobile = is_mobile;

    </script>
    <script>
        import '../scripts/global'
    </script>

</head>
<body class="waitFOUC">
<aside class="backFOUC">
    <div class="app-bar"></div>
    <noscript></noscript>
</aside>

<mdui-layout class="hasFOUC main-layout">
    <Header title={title}/>
    <mdui-layout-main class="main-article-wrapper h-screen flex flex-col">
        <div id="anchor-page-top"></div>
        <article class:list={["p-4 grow", prose_cls , className]}>
            <slot/>
        </article>
        <Footer/>
    </mdui-layout-main>
</mdui-layout>

<script is:inline type="text/javascript">
    let ex;
    try {
        ex = window.is_mobile();
    } catch (e) {
        console.error(e);
    }
    console.log('is_mobile: ' + ex);

    const drawer = document.getElementById('sidebar');
    if (ex) {
        drawer.removeAttribute('open');
    }
</script>

<script is:inline type="text/javascript">
    /** 防止过度滚动  *******
     * 目标锚点太靠近页底的话，跳转时，浏览器会把整个页面抬上去，
     * 使锚点靠近视口顶部，导致页面出现向上平移现象，
     * 页面部分被裁掉， 页面底部与视口底部出现大量空白。
     */
    document.querySelector('.main-layout')?.addEventListener('scroll', (e) => {
        console.log('Prevent excessive scrolling');
        e.preventDefault();
        e.target.scrollTo(0, 0);
    });
</script>

<script  is:inline type="text/javascript">
    function areAllValuesTrue(obj) {
        for (const key in obj) {
            //Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.<br/>No index signature with a parameter of type 'string' was found on type '{}'.
            if (obj[key] !== true) {
                return false;
            }
        }
        return true;
    }

    // NOTE: bug: 加载过程有输入事件的话，有概率出现文字拉伸现象。
    // NOTE: 这是 via 或 Android System Webview 的问题。

    let expect_sidebar_width = 360
    if (window.innerWidth < 360) {
        expect_sidebar_width = window.innerWidth * 0.85;
    }
    const ok_flags = {
        sidebar: false,
    }

    function fixFOUC() {
        if (!ok_flags.sidebar) {

            const sidebar = document.getElementById('sidebar');
            const w = sidebar.clientWidth
            // console.log(w);
            ok_flags.sidebar = !sidebar.hasAttribute('open') || w > 0 && w <= expect_sidebar_width;
            // ok_flags.sidebar =  w <= 360;
        }
    }

    const timer = setInterval(() => {
        if (areAllValuesTrue(ok_flags)) {
            clearInterval(timer);
            document.body.classList.remove('waitFOUC');
            console.log('fixFOUC done');
        } else {
            fixFOUC();
            console.debug('fixFOUC', ok_flags);

        }

    }, 100)
</script>



</body>
</html>
