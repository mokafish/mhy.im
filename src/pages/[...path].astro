---
import {collections} from '../content.config';
import magic from "../magic";
import {PathTrie, PathNode} from "../utils";
import {getCollection, render} from 'astro:content';
import Page from "../layouts/Page.astro";
import {objectPositions} from "@unocss/preset-wind4/colors";
// 1. Generate a new path for every collection entry

export async function getStaticPaths() {
    const catalog = []
    const routes = []
    for (let coll in collections) {
        // @ts-ignore
        catalog.push(await getCollection(coll))
        // const posts = await getCollection('blog');
    }

    const pt = new PathTrie()
    for (let coll of catalog) {
        for (let entry of coll) {
            let path = magic.fmt.permalink(entry)
            let props = {entry, type: 'entry'}
            pt.insert(path, props)
        }
    }

    let tm = new Map()

    for (let [path, pn] of pt.nmap) {
        if (pn.isEnd) {
            if (pn.name == 'index') {
                pn.props.type = 'index'
                pn.props.children = pn?.parent?.children //.filter(p => p.name == 'index')
            }

            routes.push({
                params: {path},
                props: pn.props,
            })
        }

        if (magic.autoindex(path)) {

        }
    }
    // const apt = pt.autoIndex(magic.autoindex)


    return routes;
    // return posts.map(post => ({
    //     params: { id: post.id },
    //     props: { post },
    // }));
}
// 2. For your template, you can get the entry directly from the prop

interface Props {
    entry: any,
    type: string,
    children: Map<string, PathNode>,
    // children: object,
}

const {entry, type, children} = Astro.props;

console.log(children)
const {Content} = await render(entry);
---

<Page title={entry.data?.title ?? entry.id} prose>
    <Content/>
    <p>
        <em>{type}</em>
    </p>

    <!--{children.get('a')}-->

    {type === 'index' && (() => {
        let list = []
        for (let [k, v] of children) {
            list.push(
                    <li>{k}</li>
            )
        }
        return <ul>{list}</ul>
    })}

    <!--{type === 'index' && children.map((v)=>(-->
    <!--    <li key={v.id}>-->
    <!--        <a>-->
    <!--            {v}-->
    <!--        </a>-->
    <!--    </li>-->
    <!--))}-->
</Page>
