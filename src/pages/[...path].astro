---
import { collections } from "../content.config";
import magic from "../magic";
import { MagicTrie, PathNode } from "../friendship";
import type { MagicEntry } from "../friendship";
import { getCollection, render } from "astro:content";
import Page from "../layouts/Page.astro";
import MagicPage from "../layouts/MagicPage.astro";
import ErrorPage from "../layouts/ErrorPage.astro";
import MagicIndex from "../layouts/MagicIndex.astro";
import { object } from "astro:schema";
// 1. Generate a new path for every collection entry
// const posts = await getCollection('blog');

export async function getStaticPaths() {
    const catalog: MagicEntry[][] = [];
    const routes = [];
    const mt = new MagicTrie();

    for (let coll in collections) {
        let entry: MagicEntry;
        // @ts-ignore
        for (entry of await getCollection(coll)) {
            let path = magic.fmt.permalink(entry);
            let props = { entry, type: "entry", data: entry.data };
            mt.insert(path, props);
        }
        // catalog.push(await getCollection(coll));
    }

    // for (let coll of catalog) {
    //     for (let entry of coll) {
    //         let path = magic.fmt.permalink(entry);
    //         let props = { entry, type: "entry", data: entry.data };
    //         mt.insert(path, props);
    //     }
    // }

    for (let [path, pn] of mt.nmap) {
        if (!pn.name) continue;

        if (!pn.hasChildren() && pn.name !== "index") {
            /** 是文件，且不是index */
            routes.push({
                params: { path },
                props: pn.props,
            });
        } else if (pn.children.has("index")) {
            /** 是目录，且里面有index*/
            pn.props = pn.children!.get("index")!.props;
            pn.props.type = "index";
            pn.props.list = pn.grouped();
            routes.push({
                params: { path },
                props: pn.props,
            });
        } else if (pn.hasChildren() && Object.keys(pn.props).length > 0) {
            /** 是目录，带有目录信息 */
            pn.props.type = "index";
            pn.props.list = pn.grouped();
            routes.push({
                params: { path },
                props: pn.props,
            });
        } else if (pn.hasChildren() && magic.autoindex(path)) {
            /** 是目录，且里面没有index，不带目录信息，开启了自动索引 */
            pn.props = {
                type: "autoindex",
                data: { title: `${pn.name} (auto index)` },
                list: pn.grouped(),
            };
            routes.push({
                params: { path },
                props: pn.props,
            });
        }

        pn.props.magicProps = {
            title: pn.props?.data?.title || pn.name,
        };
    }

    // print_routes(routes);
    return routes;
}

export function print_routes(routes: any[]) {
    for (let r of routes) {
        let path = r.params.path as string;
        let type = r.props.type;
        let data = r.props.data;
        let has_entry = r.props.entry ? true : false;
        let has_list = r.props.list ? true : false;
        if (path == "/docs/sub/index")
            console.log({
                path,
                type,
                data,
                has_entry,
                has_list,
            });
    }
}
// 2. For your template, you can get the entry directly from the prop

interface Props {
    entry: MagicEntry;
    type: string;
    list: PathNode[][];
    // children: Map<string, PathNode>,
    // children: object,
}

const { entry, type, list } = Astro.props;

// console.log(children)
let Content;
if (entry) {
    // @ts-ignore
    let _r = await render(entry);
    // console.log(_r)
    Content = _r.Content;
}
---

{
    type === "entry" ? (
        <MagicPage {...Astro.props}>{Content && <Content />}</MagicPage>
    ) : type === "index" ? (
        <MagicIndex {...Astro.props}>{Content && <Content />}</MagicIndex>
    ) : type === "autoindex" ? (
        <MagicIndex {...Astro.props} />
    ) : (
        <ErrorPage />
    )
}
